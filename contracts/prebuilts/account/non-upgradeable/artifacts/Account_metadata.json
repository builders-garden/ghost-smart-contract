{
	"compiler": {
		"version": "0.8.22+commit.4fc1097e"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "contract IEntryPoint",
						"name": "_entrypoint",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_factory",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "signer",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "isAdmin",
						"type": "bool"
					}
				],
				"name": "AdminUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "string",
						"name": "prevURI",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "newURI",
						"type": "string"
					}
				],
				"name": "ContractURIUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint8",
						"name": "version",
						"type": "uint8"
					}
				],
				"name": "Initialized",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "authorizingSigner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "targetSigner",
						"type": "address"
					},
					{
						"components": [
							{
								"internalType": "address",
								"name": "signer",
								"type": "address"
							},
							{
								"internalType": "uint8",
								"name": "isAdmin",
								"type": "uint8"
							},
							{
								"internalType": "address[]",
								"name": "approvedTargets",
								"type": "address[]"
							},
							{
								"internalType": "uint256",
								"name": "nativeTokenLimitPerTransaction",
								"type": "uint256"
							},
							{
								"internalType": "uint128",
								"name": "permissionStartTimestamp",
								"type": "uint128"
							},
							{
								"internalType": "uint128",
								"name": "permissionEndTimestamp",
								"type": "uint128"
							},
							{
								"internalType": "uint128",
								"name": "reqValidityStartTimestamp",
								"type": "uint128"
							},
							{
								"internalType": "uint128",
								"name": "reqValidityEndTimestamp",
								"type": "uint128"
							},
							{
								"internalType": "bytes32",
								"name": "uid",
								"type": "bytes32"
							}
						],
						"indexed": false,
						"internalType": "struct IAccountPermissions.SignerPermissionRequest",
						"name": "permissions",
						"type": "tuple"
					}
				],
				"name": "SignerPermissionsUpdated",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "addDeposit",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "contractURI",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "entryPoint",
				"outputs": [
					{
						"internalType": "contract IEntryPoint",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_target",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_value",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "_calldata",
						"type": "bytes"
					}
				],
				"name": "execute",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "_target",
						"type": "address[]"
					},
					{
						"internalType": "uint256[]",
						"name": "_value",
						"type": "uint256[]"
					},
					{
						"internalType": "bytes[]",
						"name": "_calldata",
						"type": "bytes[]"
					}
				],
				"name": "executeBatch",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "factory",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAllActiveSigners",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "signer",
								"type": "address"
							},
							{
								"internalType": "address[]",
								"name": "approvedTargets",
								"type": "address[]"
							},
							{
								"internalType": "uint256",
								"name": "nativeTokenLimitPerTransaction",
								"type": "uint256"
							},
							{
								"internalType": "uint128",
								"name": "startTimestamp",
								"type": "uint128"
							},
							{
								"internalType": "uint128",
								"name": "endTimestamp",
								"type": "uint128"
							}
						],
						"internalType": "struct IAccountPermissions.SignerPermissions[]",
						"name": "signers",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAllAdmins",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAllSigners",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "signer",
								"type": "address"
							},
							{
								"internalType": "address[]",
								"name": "approvedTargets",
								"type": "address[]"
							},
							{
								"internalType": "uint256",
								"name": "nativeTokenLimitPerTransaction",
								"type": "uint256"
							},
							{
								"internalType": "uint128",
								"name": "startTimestamp",
								"type": "uint128"
							},
							{
								"internalType": "uint128",
								"name": "endTimestamp",
								"type": "uint128"
							}
						],
						"internalType": "struct IAccountPermissions.SignerPermissions[]",
						"name": "signers",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "message",
						"type": "bytes"
					}
				],
				"name": "getMessageHash",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getNonce",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "signer",
						"type": "address"
					}
				],
				"name": "getPermissionsForSigner",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "signer",
								"type": "address"
							},
							{
								"internalType": "address[]",
								"name": "approvedTargets",
								"type": "address[]"
							},
							{
								"internalType": "uint256",
								"name": "nativeTokenLimitPerTransaction",
								"type": "uint256"
							},
							{
								"internalType": "uint128",
								"name": "startTimestamp",
								"type": "uint128"
							},
							{
								"internalType": "uint128",
								"name": "endTimestamp",
								"type": "uint128"
							}
						],
						"internalType": "struct IAccountPermissions.SignerPermissions",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_defaultAdmin",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "_data",
						"type": "bytes"
					}
				],
				"name": "initialize",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "signer",
						"type": "address"
					}
				],
				"name": "isActiveSigner",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_account",
						"type": "address"
					}
				],
				"name": "isAdmin",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_message",
						"type": "bytes32"
					},
					{
						"internalType": "bytes",
						"name": "_signature",
						"type": "bytes"
					}
				],
				"name": "isValidSignature",
				"outputs": [
					{
						"internalType": "bytes4",
						"name": "magicValue",
						"type": "bytes4"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_signer",
						"type": "address"
					},
					{
						"components": [
							{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "nonce",
								"type": "uint256"
							},
							{
								"internalType": "bytes",
								"name": "initCode",
								"type": "bytes"
							},
							{
								"internalType": "bytes",
								"name": "callData",
								"type": "bytes"
							},
							{
								"internalType": "uint256",
								"name": "callGasLimit",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "verificationGasLimit",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "preVerificationGas",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "maxFeePerGas",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "maxPriorityFeePerGas",
								"type": "uint256"
							},
							{
								"internalType": "bytes",
								"name": "paymasterAndData",
								"type": "bytes"
							},
							{
								"internalType": "bytes",
								"name": "signature",
								"type": "bytes"
							}
						],
						"internalType": "struct UserOperation",
						"name": "_userOp",
						"type": "tuple"
					}
				],
				"name": "isValidSigner",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes[]",
						"name": "data",
						"type": "bytes[]"
					}
				],
				"name": "multicall",
				"outputs": [
					{
						"internalType": "bytes[]",
						"name": "results",
						"type": "bytes[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256[]",
						"name": "",
						"type": "uint256[]"
					},
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"name": "onERC1155BatchReceived",
				"outputs": [
					{
						"internalType": "bytes4",
						"name": "",
						"type": "bytes4"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"name": "onERC1155Received",
				"outputs": [
					{
						"internalType": "bytes4",
						"name": "",
						"type": "bytes4"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"name": "onERC721Received",
				"outputs": [
					{
						"internalType": "bytes4",
						"name": "",
						"type": "bytes4"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_uri",
						"type": "string"
					}
				],
				"name": "setContractURI",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IEntryPoint",
						"name": "_entrypointOverride",
						"type": "address"
					}
				],
				"name": "setEntrypointOverride",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "signer",
								"type": "address"
							},
							{
								"internalType": "uint8",
								"name": "isAdmin",
								"type": "uint8"
							},
							{
								"internalType": "address[]",
								"name": "approvedTargets",
								"type": "address[]"
							},
							{
								"internalType": "uint256",
								"name": "nativeTokenLimitPerTransaction",
								"type": "uint256"
							},
							{
								"internalType": "uint128",
								"name": "permissionStartTimestamp",
								"type": "uint128"
							},
							{
								"internalType": "uint128",
								"name": "permissionEndTimestamp",
								"type": "uint128"
							},
							{
								"internalType": "uint128",
								"name": "reqValidityStartTimestamp",
								"type": "uint128"
							},
							{
								"internalType": "uint128",
								"name": "reqValidityEndTimestamp",
								"type": "uint128"
							},
							{
								"internalType": "bytes32",
								"name": "uid",
								"type": "bytes32"
							}
						],
						"internalType": "struct IAccountPermissions.SignerPermissionRequest",
						"name": "_req",
						"type": "tuple"
					},
					{
						"internalType": "bytes",
						"name": "_signature",
						"type": "bytes"
					}
				],
				"name": "setPermissionsForSigner",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "nonce",
								"type": "uint256"
							},
							{
								"internalType": "bytes",
								"name": "initCode",
								"type": "bytes"
							},
							{
								"internalType": "bytes",
								"name": "callData",
								"type": "bytes"
							},
							{
								"internalType": "uint256",
								"name": "callGasLimit",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "verificationGasLimit",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "preVerificationGas",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "maxFeePerGas",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "maxPriorityFeePerGas",
								"type": "uint256"
							},
							{
								"internalType": "bytes",
								"name": "paymasterAndData",
								"type": "bytes"
							},
							{
								"internalType": "bytes",
								"name": "signature",
								"type": "bytes"
							}
						],
						"internalType": "struct UserOperation",
						"name": "userOp",
						"type": "tuple"
					},
					{
						"internalType": "bytes32",
						"name": "userOpHash",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "missingAccountFunds",
						"type": "uint256"
					}
				],
				"name": "validateUserOp",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "validationData",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "signer",
								"type": "address"
							},
							{
								"internalType": "uint8",
								"name": "isAdmin",
								"type": "uint8"
							},
							{
								"internalType": "address[]",
								"name": "approvedTargets",
								"type": "address[]"
							},
							{
								"internalType": "uint256",
								"name": "nativeTokenLimitPerTransaction",
								"type": "uint256"
							},
							{
								"internalType": "uint128",
								"name": "permissionStartTimestamp",
								"type": "uint128"
							},
							{
								"internalType": "uint128",
								"name": "permissionEndTimestamp",
								"type": "uint128"
							},
							{
								"internalType": "uint128",
								"name": "reqValidityStartTimestamp",
								"type": "uint128"
							},
							{
								"internalType": "uint128",
								"name": "reqValidityEndTimestamp",
								"type": "uint128"
							},
							{
								"internalType": "bytes32",
								"name": "uid",
								"type": "bytes32"
							}
						],
						"internalType": "struct IAccountPermissions.SignerPermissionRequest",
						"name": "req",
						"type": "tuple"
					},
					{
						"internalType": "bytes",
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "verifySignerPermissionRequest",
				"outputs": [
					{
						"internalType": "bool",
						"name": "success",
						"type": "bool"
					},
					{
						"internalType": "address",
						"name": "signer",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address payable",
						"name": "withdrawAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "withdrawDepositTo",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"events": {
				"ContractURIUpdated(string,string)": {
					"details": "Emitted when the contract URI is updated."
				},
				"Initialized(uint8)": {
					"details": "Triggered when the contract has been initialized or reinitialized."
				}
			},
			"kind": "dev",
			"methods": {
				"getMessageHash(bytes)": {
					"params": {
						"message": "Message to be hashed i.e. `keccak256(abi.encode(data))`"
					},
					"returns": {
						"_0": "Hashed message"
					}
				},
				"isValidSigner(address,(address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))": {
					"params": {
						"_signer": "The signer to check.",
						"_userOp": "The user operation to check."
					},
					"returns": {
						"_0": "Whether the signer is authorized to perform the transaction."
					}
				},
				"multicall(bytes[])": {
					"details": "Receives and executes a batch of function calls on this contract.",
					"params": {
						"data": "The bytes data that makes up the batch of function calls to execute."
					},
					"returns": {
						"results": "The bytes data that makes up the result of the batch of function calls executed."
					}
				},
				"onERC721Received(address,address,uint256,bytes)": {
					"details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
				},
				"setContractURI(string)": {
					"details": "Caller should be authorized to setup contractURI, e.g. contract admin.                  See {_canSetContractURI}.                  Emits {ContractURIUpdated Event}.",
					"params": {
						"_uri": "keccak256 hash of the role. e.g. keccak256(\"TRANSFER_ROLE\")"
					}
				},
				"verifySignerPermissionRequest((address,uint8,address[],uint256,uint128,uint128,uint128,uint128,bytes32),bytes)": {
					"details": "Verifies that a request is signed by an authorized account."
				}
			},
			"version": 1
		},
		"userdoc": {
			"events": {
				"AdminUpdated(address,bool)": {
					"notice": "Emitted when an admin is set or removed."
				},
				"SignerPermissionsUpdated(address,address,(address,uint8,address[],uint256,uint128,uint128,uint128,uint128,bytes32))": {
					"notice": "Emitted when permissions for a signer are updated."
				}
			},
			"kind": "user",
			"methods": {
				"addDeposit()": {
					"notice": "Deposit funds for this account in Entrypoint."
				},
				"contractURI()": {
					"notice": "Returns the contract metadata URI."
				},
				"entryPoint()": {
					"notice": "Returns the EIP 4337 entrypoint contract."
				},
				"execute(address,uint256,bytes)": {
					"notice": "Executes a transaction (called directly from an admin, or by entryPoint)"
				},
				"executeBatch(address[],uint256[],bytes[])": {
					"notice": "Executes a sequence transaction (called directly from an admin, or by entryPoint)"
				},
				"factory()": {
					"notice": "EIP 4337 factory for this contract."
				},
				"getAllActiveSigners()": {
					"notice": "Returns all signers with active permissions to use the account."
				},
				"getAllAdmins()": {
					"notice": "Returns all admins of the account."
				},
				"getAllSigners()": {
					"notice": "Returns all active and inactive signers of the account."
				},
				"getMessageHash(bytes)": {
					"notice": "Returns the hash of message that should be signed for EIP1271 verification."
				},
				"getNonce()": {
					"notice": "Return the account nonce. This method returns the next sequential nonce. For a nonce of a specific key, use `entrypoint.getNonce(account, key)`"
				},
				"getPermissionsForSigner(address)": {
					"notice": "Returns the restrictions under which a signer can use the smart wallet."
				},
				"initialize(address,bytes)": {
					"notice": "Initializes the smart contract wallet."
				},
				"isActiveSigner(address)": {
					"notice": "Returns whether the given account is an active signer on the account."
				},
				"isAdmin(address)": {
					"notice": "Returns whether the given account is an admin."
				},
				"isValidSignature(bytes32,bytes)": {
					"notice": "See EIP-1271"
				},
				"isValidSigner(address,(address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))": {
					"notice": "Returns whether a signer is authorized to perform transactions using the account. Validity of the signature is based upon signer permission start/end timestamps, txn target, and txn value. Account admins will always return true, and signers with address(0) as the only approved target will skip target checks."
				},
				"multicall(bytes[])": {
					"notice": "Receives and executes a batch of function calls on this contract."
				},
				"setContractURI(string)": {
					"notice": "Lets a contract admin set the URI for contract-level metadata."
				},
				"setEntrypointOverride(address)": {
					"notice": "Overrides the Entrypoint contract being used."
				},
				"setPermissionsForSigner((address,uint8,address[],uint256,uint128,uint128,uint128,uint128,bytes32),bytes)": {
					"notice": "Sets the permissions for a given signer."
				},
				"supportsInterface(bytes4)": {
					"notice": "See {IERC165-supportsInterface}."
				},
				"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)": {
					"notice": "Validate user's signature and nonce. subclass doesn't need to override this method. Instead, it should override the specific internal validation methods."
				},
				"withdrawDepositTo(address,uint256)": {
					"notice": "Withdraw funds for this account from Entrypoint."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/ghost/prebuilts/account/non-upgradeable/Account.sol": "Account"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/ghost/eip/ERC1271.sol": {
			"keccak256": "0xce12f73b64a1d954ce3b96cc83974d9a9d7b1e6f34e75ed8c1fdcf19ed92574e",
			"license": "Apache 2.0",
			"urls": [
				"bzz-raw://ac19729c3f76aa804eff7dd0365bfaff3871b22953908a26cc0dd07a0319c6c0",
				"dweb:/ipfs/QmTQMZGceJ4QvWAwngCEbt6PfQhZMHWhuzE8wWVC8yR7Ro"
			]
		},
		"contracts/ghost/eip/ERC165.sol": {
			"keccak256": "0x0ea604ea6ebe99809a2f620009c8dead82d7fb17ab12b734e1e29c8ceb85938b",
			"license": "MIT",
			"urls": [
				"bzz-raw://d9d109154c913e34d107db2cec5608dd8a55075dee35ae77aa78ebb9ff7d856c",
				"dweb:/ipfs/QmW8QKw4kag1Bv68FjSZiGvPP8WDocjdhLSd3ssUXZ5Kgr"
			]
		},
		"contracts/ghost/eip/interface/IERC165.sol": {
			"keccak256": "0x35d0a916f70344a5fcc6c67cb531b6150d2fce43e72a6282385eab02020f2f49",
			"license": "MIT",
			"urls": [
				"bzz-raw://75ccd8b9a8b52a93b8097fcb8181b7afb6d72bbe6eaabf434f0481a7a207cc8a",
				"dweb:/ipfs/QmPUZAEE4nwkijcE2amAXAWEVGVG5XaKWGhpgnRwpAf93R"
			]
		},
		"contracts/ghost/extension/Multicall.sol": {
			"keccak256": "0xe4479833f6297a1461478733e14dd0e9b8376da474fa7067cb8937f9ccff2836",
			"license": "Apache 2.0",
			"urls": [
				"bzz-raw://b03c41daeba7783e04387eff65f6ccc50f2312d895ff3cb9198410976df19c4e",
				"dweb:/ipfs/QmV54V9YQn9TWZhoAsFex8GdCkQmFX6iajYnUv5zU1sxEQ"
			]
		},
		"contracts/ghost/extension/interface/IAccountPermissions.sol": {
			"keccak256": "0xfb7f2234c9c03480db9241fb9ca487a6b671c03f27836abbb33e24e79f401c52",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://156c44d9bc550c602e964dd655112de25a3966cfd6870e9631b9d841cebe028b",
				"dweb:/ipfs/Qmbq5ozkA52o86eGxDG3wMBYtMZM6dMatnA3B64sbYjADJ"
			]
		},
		"contracts/ghost/extension/interface/IContractMetadata.sol": {
			"keccak256": "0x41d3f7f43c124e9ff0247cb94f4e8fc8c5a79b1de331c67eb03654154248d7f2",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://fa8d6251cf3a876193cc719b456c02ff23d3f2d5486431e9bdaf290be9a4ce9a",
				"dweb:/ipfs/QmRwnA2q15Vdkc66fz6BAinZM3tjuVNHn5CeGzc7ZFMAzr"
			]
		},
		"contracts/ghost/extension/interface/IMulticall.sol": {
			"keccak256": "0xe2bbd37b8fdb9cc8b933e598512a068ebb214b3f5abc2bc634916def55be4ef3",
			"license": "MIT",
			"urls": [
				"bzz-raw://012352099c262348ac755a53b082af520babc6c66dc5f1251fc23609728340ca",
				"dweb:/ipfs/QmcXEgzQ53jdJX5ZNy8zivvUjDq7J8WTnR1yAiwTpkQ2ar"
			]
		},
		"contracts/ghost/extension/upgradeable/AccountPermissions.sol": {
			"keccak256": "0x24c130546924f7838c676f71585d30bd7891ee51098d4b0e39a2be43acce3852",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://f7ae95a9bd317b220d1c8fe99c4eca2ea3dca14456f225e17accf28e5acd4f03",
				"dweb:/ipfs/QmaAUPY6C1diScgonDxeUHjr6AezSpD5iJU9vZ5Vdt97Ws"
			]
		},
		"contracts/ghost/extension/upgradeable/ContractMetadata.sol": {
			"keccak256": "0xe42f63bdf826446047de0825bc930d8a157cf613cf35b74cd10ade9246ed5907",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://a907ddcadb07f70600753b37b129d7be234f44cd557aaa0a5833b0a796a2a826",
				"dweb:/ipfs/QmdhJ3Y4N6nnQDgLCPVmyRU26sgJfkLxUnqgSt911Eqmms"
			]
		},
		"contracts/ghost/extension/upgradeable/Initializable.sol": {
			"keccak256": "0x359ee85a4b1b32f7e875ff4742ce3b347a036e2d065675494889e9753fc6f64a",
			"license": "Apache 2.0",
			"urls": [
				"bzz-raw://daa0a7f80cf27545e7040c2bc32486c4d9a8a8a75a7cde5ad6ea4b85f75f6fbf",
				"dweb:/ipfs/QmZmKPCTUUKN8BKo2aCGFRYVAkZtEs3R6Ysx1m3Kibv4Ai"
			]
		},
		"contracts/ghost/external-deps/openzeppelin/proxy/Clones.sol": {
			"keccak256": "0x0e1fe02da411a6293004e5ee85bdd1facef5f1b6ef2aab8d36c73f0d77b448db",
			"license": "MIT",
			"urls": [
				"bzz-raw://c5bfd474499866fe24ac6b88eb92969395baf1e644a0f0b0054e66f9ae90c00e",
				"dweb:/ipfs/QmS5j268UauZARToNJazEBJDWvWM35j8kHx779PF3c5rib"
			]
		},
		"contracts/ghost/external-deps/openzeppelin/token/ERC1155/IERC1155Receiver.sol": {
			"keccak256": "0xfa15dab6578501dc97f9b3fbb5c149f687556f1c9e05f8e308e203487202a826",
			"license": "MIT",
			"urls": [
				"bzz-raw://7d78ecefcc13f40d148f851c3ee037c52e6bc4d9cf99bff47202372e8b12ebb4",
				"dweb:/ipfs/QmYSFk1hKNeW5M1SXg8JREVSw3EkTtheHm6je8kFzJCwfn"
			]
		},
		"contracts/ghost/external-deps/openzeppelin/token/ERC1155/utils/ERC1155Holder.sol": {
			"keccak256": "0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3",
			"license": "MIT",
			"urls": [
				"bzz-raw://a74009db3c6fc8db851ba69ddb6795b5c1ef1120c5a00fd1a8dc3a717dd9d519",
				"dweb:/ipfs/QmZMk8Yh2X3gPS51ckUVLEXjZUhMSEeGApnA53WtjvLb9h"
			]
		},
		"contracts/ghost/external-deps/openzeppelin/token/ERC1155/utils/ERC1155Receiver.sol": {
			"keccak256": "0x3105f99cacb873592e34c8a0ac41c082e640ca5ba5f1269f9d156f72780aabb8",
			"license": "MIT",
			"urls": [
				"bzz-raw://52d27f9e2e65e3f9cd8376a4cd30370b065d355f810458872115e0b23ca483d7",
				"dweb:/ipfs/QmQ9rofayAoymc4pgjqCss4AmkGGKJEsDcieqPMsKtKByC"
			]
		},
		"contracts/ghost/external-deps/openzeppelin/token/ERC721/IERC721Receiver.sol": {
			"keccak256": "0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f",
			"license": "MIT",
			"urls": [
				"bzz-raw://33017a30a99cc5411a9e376622c31fc4a55cfc6a335e2f57f00cbf24a817ff3f",
				"dweb:/ipfs/QmWNQtWTPhA7Lo8nbxbc8KFMvZwbFYB8fSeEQ3vuapSV4a"
			]
		},
		"contracts/ghost/external-deps/openzeppelin/token/ERC721/utils/ERC721Holder.sol": {
			"keccak256": "0xe703814ee88fca440ac66fbfbbf3a5085d9028237145e6c3447c7ca44d1177ed",
			"license": "MIT",
			"urls": [
				"bzz-raw://2c09e9ee347c311074d0cce306cef98c1b9ab7d06ff360031c4c71214e1395ef",
				"dweb:/ipfs/QmTE9VX4ejp2D5wimaPvzoAZefAMVNybCwdYJm2sEwfXni"
			]
		},
		"contracts/ghost/external-deps/openzeppelin/utils/cryptography/ECDSA.sol": {
			"keccak256": "0x2f1ee59fbdefde38381074fcd365a919dbd9ab6d6240e07b1753961f8e6fcd3b",
			"license": "MIT",
			"urls": [
				"bzz-raw://108be415a1fe17915fa42ba5eb6cdf812b25d88b299c8dc05721241078871ebe",
				"dweb:/ipfs/Qmc8AJ6jfL3jTi597Z86hkQYEX2FaP66s1tWs9uuEyTRPn"
			]
		},
		"contracts/ghost/external-deps/openzeppelin/utils/cryptography/EIP712.sol": {
			"keccak256": "0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7",
			"license": "MIT",
			"urls": [
				"bzz-raw://8bc00ab7f133cdaafd212a5cc6a16c8d37319721105d130c8e5af0c4e8f170ba",
				"dweb:/ipfs/QmVmf6LVMfFiEkvKYLzSv3bGHzymEW93AcUuFrNUdY3NtT"
			]
		},
		"contracts/ghost/external-deps/openzeppelin/utils/structs/EnumerableSet.sol": {
			"keccak256": "0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4",
			"license": "MIT",
			"urls": [
				"bzz-raw://d4831d777a29ebdf9f2caecd70e74b97bff1b70e53622fd0a02aed01e21c8271",
				"dweb:/ipfs/QmUqurVVnCc7XkMxb2k23TVQUtuhHZduJ3hTZarTJrqU24"
			]
		},
		"contracts/ghost/lib/Address.sol": {
			"keccak256": "0xa1e2c06c07422ce6f27ab1c4d4ce62bdc3200e082b735b5e3a75c2e7b61cbc4f",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://cc90229c980f78c582a05386d4621172c7d20dec9ad528a5bf1d59b243fff0a5",
				"dweb:/ipfs/QmcZZLaZ9XU1gWj7b9EBZftPoED3pKEvvFGhS5yBvtMPtn"
			]
		},
		"contracts/ghost/lib/BytesLib.sol": {
			"keccak256": "0xa6eb27284b96770c4eb22be18bb0c71f73caff260e6223abb5f0fdaf3788e515",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://12bc240624a3dc7eb720af95f7b9532984864520c251be31a0b310a214e8af65",
				"dweb:/ipfs/QmTktZehWmPBNfaNw1VVm6MySkmNaPQeJyuuLjuBma4wCA"
			]
		},
		"contracts/ghost/lib/Strings.sol": {
			"keccak256": "0xd8fcca4db8f1678a124ae0d3b4da6c29e9737e5ae03f90f18b84261ae4499568",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://ed0d23694c31613645904cc5d6f3e08ecd34063aeb5bd23ebc9a8223a67f91fb",
				"dweb:/ipfs/QmTf9WBdvzU2dDDTqeSn1g85AkXTe8MfN1pdyaVzm15Cdb"
			]
		},
		"contracts/ghost/prebuilts/account/interface/IAccount.sol": {
			"keccak256": "0x98f2d41bd69f4b46a697957681d2e14cf2f10b6133ede864b838f821899d4e41",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://ddaae235044c84994f693a38030d3923bb8e65f9b7f1fc5028a424a16f7a723c",
				"dweb:/ipfs/QmdXzv1k9mdECGxUDigBf6GAb3bn3qMdTKcmGadJ4EoLzL"
			]
		},
		"contracts/ghost/prebuilts/account/interface/IAccountCore.sol": {
			"keccak256": "0xd1fc238376d4fa8c881f06159662b4c5b855c633fad840d97b1abc368b701a83",
			"license": "Apache 2.0",
			"urls": [
				"bzz-raw://990de8226236d213aa9b8eef60d96782c58cc226a0f4ec0ea6c0c63a2a3019bc",
				"dweb:/ipfs/QmWoUNKgiAH8vPfsNsjEtSNsg6Rmgnqp4fU9Zaej4iKRsE"
			]
		},
		"contracts/ghost/prebuilts/account/interface/IAccountFactory.sol": {
			"keccak256": "0xc57560766cadb9834bed6f7ade0d8968152dd8118e46211d084f3aa476dd3169",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://189672029caee09d461fc4bc8d6d9fdbdc25ce0ce96e0b07cd47c0ad739cccc3",
				"dweb:/ipfs/QmeBzdQHTuupCW5LeuGCqxJYSDXTnprHcBegBY3v93ahwW"
			]
		},
		"contracts/ghost/prebuilts/account/interface/IAccountFactoryCore.sol": {
			"keccak256": "0x8a518d843fb5249c28df0b50d8beb0726f8114f42dd74d90dbfe62b1b0c26856",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://48379dc33cd42392ce0d988585dc62101c45a24ab554e3ab1e5e6d324845ef6c",
				"dweb:/ipfs/QmRRmYDzyL5x82pWSDWJSHniNFP87aQdXYqfWtj4g9aw5s"
			]
		},
		"contracts/ghost/prebuilts/account/interface/IAggregator.sol": {
			"keccak256": "0xf25b6da72dfcb022d6d3c16aaa4a2d9860bf51483356cb26b314b37a01e7a1bb",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://800a724a532870ae3de64fe798352427c9a3168cc44fe1320f1fecea8126df03",
				"dweb:/ipfs/QmNb1s7rDkKePrE4iKMQ3UJyrsScZRomLWf4aj6QBJnRAZ"
			]
		},
		"contracts/ghost/prebuilts/account/interface/IEntrypoint.sol": {
			"keccak256": "0x8108c62da675ac3e840e56c07dc74f04e6993d1f23812821082a92cfd6a079b1",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://abc88d73e8e22622456cc4079e8df66ce81a66e6fd280731c63875d7cb667f0c",
				"dweb:/ipfs/QmVpxV56vM6TbZEK5idNEtdvHtQ3dXMJdWXusm6cit3FPo"
			]
		},
		"contracts/ghost/prebuilts/account/interface/INonceManager.sol": {
			"keccak256": "0xf509795f7336c849ac5d247d71af20376b67201c647aa847fd17ca8e7909dec3",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://b3418173e37999ba0015bb352ab1b9dfbe1296143a8565ea3d3ce7a9a9e087b4",
				"dweb:/ipfs/QmS93Dw1FfPj5kHk9cLrh1VssbwNyaKKo5LNmEHwxzDqNp"
			]
		},
		"contracts/ghost/prebuilts/account/interface/IStakeManager.sol": {
			"keccak256": "0x61562da096c3c3da5755bbb5b552ea713723d7be36975cd401022ff321753b73",
			"license": "GPL-3.0-only",
			"urls": [
				"bzz-raw://e6bcd63477257007d2fcd92b38c8105cb82c2d0eae3836ac856839234481f4ab",
				"dweb:/ipfs/QmZuNE3y1RvtRXYiw3eiT25YQH2SAa1kFcpxAgW9KX6KtZ"
			]
		},
		"contracts/ghost/prebuilts/account/non-upgradeable/Account.sol": {
			"keccak256": "0xd369a31dc57a5c63fed0be9cb08bf3ac89bc2d75d84ac6d0900050f9ed4ab937",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://188deb95a6e861e2b6ca3bc28d7611fd2014d7437ff930b3c3602cf818cf82d9",
				"dweb:/ipfs/QmRqZ46Seod2n3oCPWYvmDKF3A7W5gbfGEKWQMLfScKDkH"
			]
		},
		"contracts/ghost/prebuilts/account/utils/AccountCore.sol": {
			"keccak256": "0x41257c708182d057736a9089c01c24a8c7983f3953cdfa99ee16539066412fe2",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://ed83fa3d50dc45e98a0150e3428328893e17fd487cc147db3f9d586d30fdf17b",
				"dweb:/ipfs/QmTbx5MqAAiBLNeuAmFEyXicoxqH1Q2YgkRB2C7ZoxArkJ"
			]
		},
		"contracts/ghost/prebuilts/account/utils/AccountCoreStorage.sol": {
			"keccak256": "0x2cc0f23b78b77cb625ca9f16a4098d9695dae300f50f627ff9447d0fee4c6d6c",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://accce31e4cf16735ee72fb4619582a9a0441fd07c5259dc7dbefd758121b2383",
				"dweb:/ipfs/Qmdh4i9mbjFqNncakFBGppkNVvxRkhQfpLktjbi3LorTue"
			]
		},
		"contracts/ghost/prebuilts/account/utils/AccountExtension.sol": {
			"keccak256": "0xd587034549a0d54fa035427ad87737cdcdba37e7c14edc36f836336521d2f432",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://10375a7085bd4a74074a287905de656c74c934576ee640db3d446cf895266f7e",
				"dweb:/ipfs/QmXJno6iZfHmdoJktv4PqstPBYwv14sECZA6HXTwyCtGjq"
			]
		},
		"contracts/ghost/prebuilts/account/utils/BaseAccount.sol": {
			"keccak256": "0xe4c645052e3223dc617ce4fdb8c44eee6047f50187b38d2b19e8f88575a6362d",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://25f657768c1c652e7e68ba8ba3c4e667ff22872a7476c902ea7966092923f4aa",
				"dweb:/ipfs/QmRke55xXKGsKMoNFUtm17t2nqmgfSHfEgx4vrib8c3i7D"
			]
		},
		"contracts/ghost/prebuilts/account/utils/BaseAccountFactory.sol": {
			"keccak256": "0xd3b72a2540f1ec4e3002e379b94bf0ee59fd2d691eafa90a6d40221ad949b86a",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://9e5db462e6bf284ab462054331e422ec79fef4ad8d62eb1402d2a2a37f6c9e99",
				"dweb:/ipfs/QmXRauFSgHgsomMqfFkRJTWVsEfgzkzZHjQA7QsFikX52j"
			]
		},
		"contracts/ghost/prebuilts/account/utils/Helpers.sol": {
			"keccak256": "0x362ebd624a0a4893c8d80f2dc86b27198a6f22d3bca6d4ad648cd4f12b8b2e5d",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://bb43f98886861a0d1a6a80aaf8bfda8a2e8dace798e559dcba9fe5ebd2738817",
				"dweb:/ipfs/QmUfAk7cbLqfhJdGgZeCqdzHFxrtjQgcbGtcQEbioLUDuS"
			]
		},
		"contracts/ghost/prebuilts/account/utils/UserOperation.sol": {
			"keccak256": "0x3f3aa133687f459f9fb538835a54aa769418dd6303a02c9fa691690fcc397964",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://993f8daa2320ca301167767fff33a6989697394fe6dc65905edc4b32368850b5",
				"dweb:/ipfs/Qmaymg8dsE6mrfAWJPs4DXbHR1wxESJnxyFhNkm7AmKBCK"
			]
		}
	},
	"version": 1
}